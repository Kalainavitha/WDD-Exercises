1) Show the output for the following snippet.
<? php
$capital=67;
print(“Variable capital is $capital”);
print(“Variable CaPiTaL is $CaPiTaL”);
?>
INPUT:
<?php
$capital = 67;
$CaPiTaL = null;
print("Variable capital is $capital\n");
print("Variable CaPiTaL is " . ($CaPiTaL ?? 'NULL') . "\n");
?>
OUTPUT:
Variable capital is 67
Variable CaPiTaL is NULL

2) Create a PHP program to display the division table using for-loop.
1 2 3
1 1 0.5 0.33
2 2 1 0.66
3 3 1.5 1
INPUT:
<?php
$size = 3;
for ($i = 1; $i <= $size; $i++) {
    echo "$i ";
}
echo "\n";
for ($i = 1; $i <= $size; $i++) {
    echo "$i ";
    for ($j = 1; $j <= $size; $j++) {
        $result = round($i / $j, 2);
        echo "$result ";
    }
    echo "\n";
}
?>

4) Predict the output of the following snippet:
$animal = “antelope”; $animal_heads = 1; $animal_legs = 4;
echo“The $animal has $animal_heads head(s).”;
echo“The $animal has $animal_legs leg(s).”;
INPUT:
<?php
$animal = "antelope";
$animal_heads = 1;
$animal_legs = 4;

echo "The $animal has $animal_heads head(s).";
echo "The $animal has $animal_legs leg(s).";
?>
OUTPUT:
The antelope has 1 head(s).The antelope has 4 leg(s).

5)You are building a website where users can calculate the total cost of their purchases.
Write a PHP program that takes the price and quantity of three items from the user and
calculates the subtotal, tax (10% of the subtotal),and the total cost (subtotal + tax).
Display the results to the user.
INPUT:
<?php
// Item 1
$price1 = 50;
$qty1 = 2;

// Item 2
$price2 = 30;
$qty2 = 3;

// Item 3
$price3 = 20;
$qty3 = 1;

// Calculate subtotal
$subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
// Calculate tax (10%)
$tax = $subtotal * 0.10;

// Total cost
$total = $subtotal + $tax;

// Output
echo "Item 1: ₹$price1 × $qty1 = ₹" . ($price1 * $qty1) . "\n";
echo "Item 2: ₹$price2 × $qty2 = ₹" . ($price2 * $qty2) . "\n";
echo "Item 3: ₹$price3 × $qty3 = ₹" . ($price3 * $qty3) . "\n\n";

echo "Subtotal: ₹" . number_format($subtotal, 2) . "\n";
echo "Tax (10%): ₹" . number_format($tax, 2) . "\n";
echo "Total Cost: ₹" . number_format($total, 2) . "\n";
?>
OUTPUT:
Item 1: ₹50 × 2 = ₹100
Item 2: ₹30 × 3 = ₹90
Item 3: ₹20 × 1 = ₹20

Subtotal: ₹210.00
Tax (10%): ₹21.00
Total Cost: ₹231.00

=== Code Execution Successful ===

8. A customer visits a shop to buy a soft drink; he has two options:
Drink A cost is Rs.25 and the size of the bottle is 11.
Drink B cost is Rs.23 and its size of the bottle is 9.
INPUT:
<?php
function deal() {
    $costA = 25;
    $sizeA = 11;
    $costB = 23;
    $sizeB = 9;

    $unitPriceA = $costA / $sizeA; // cost per ml for A
    $unitPriceB = $costB / $sizeB; // cost per ml for B

    echo "Drink A: ₹$costA for $sizeA units → ₹" . round($unitPriceA, 2) . " per unit<br>";
    echo "Drink B: ₹$costB for $sizeB units → ₹" . round($unitPriceB, 2) . " per unit<br><br>";

    if ($unitPriceA < $unitPriceB) {
        echo "➡️ Choose Drink A to save money.";
    } elseif ($unitPriceB < $unitPriceA) {
        echo "➡️ Choose Drink B to save money.";
    } else {
        echo "Both drinks offer the same value.";
    }
}

deal();
?>

OUTPUT:
Drink A: ₹25 for 11 units → ₹2.27 per unit  
Drink B: ₹23 for 9 units → ₹2.56 per unit  
Choose Drink A to save money.

9.Predict the output of the following snippet:

$this = “this”; $that = “that”; $the_other = 2.2000000000;
print(“$this,$not_set,$that+$the_other”);

CORRECTED INPUT:
<?php
$my_var = "this";        
$that = "that";
$the_other = 2.2;
$not_set = "";            
print("$my_var,$not_set,{$that}+{$the_other}");
?>

OUTPUT:0
this,,that+2.2

10. Develop a program to check student grades based on marks using a loop.
<?php
if (isset($_SERVER["REQUEST_METHOD"]) && $_SERVER["REQUEST_METHOD"] === "POST") {
    $names = $_POST['name'];
    $marks = $_POST['marks'];

    for ($i = 0; $i < count($names); $i++) {
        $grade = "";
        if ($marks[$i] >= 90) {
            $grade = "A";
        } elseif ($marks[$i] >= 80) {
            $grade = "B";
        } elseif ($marks[$i] >= 70) {
            $grade = "C";
        } elseif ($marks[$i] >= 60) {
            $grade = "D";
        } else {
            $grade = "F";
        }

        echo $names[$i] . " - Marks: " . $marks[$i] . " - Grade: " . $grade . "<br>";
    }
} else {
    ?>
    <form method="post">
        <h3>Enter Student Marks</h3>
        Student 1: <input type="text" name="name[]" placeholder="Name">
        Marks: <input type="number" name="marks[]" min="0" max="100"><br><br>

        Student 2: <input type="text" name="name[]" placeholder="Name">
        Marks: <input type="number" name="marks[]" min="0" max="100"><br><br>

        Student 3: <input type="text" name="name[]" placeholder="Name">
        Marks: <input type="number" name="marks[]" min="0" max="100"><br><br>

        <input type="submit" value="Check Grades">
    </form>
    <?php
}
?>


11.Develop a PHP program to show days of the week using switch cases.
INPUT:
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $dayNumber = $_POST['day'];

    switch ($dayNumber) {
        case 1:
            $message = "Today is Monday";
            break;
        case 2:
            $message = "Today is Tuesday";
            break;
        case 3:
            $message = "Today is Wednesday";
            break;
        case 4:
            $message = "Today is Thursday";
            break;
        case 5:
            $message = "Today is Friday";
            break;
        case 6:
            $message = "Today is Saturday";
            break;
        case 7:
            $message = "Today is Sunday";
            break;
        default:
            $message = "Invalid number! Please enter a number between 1 and 7.";
    }

    echo "<h3>$message</h3>";
}
?>
<form method="post">
    Enter a number (1-7): 
    <input type="number" name="day" min="1" max="7" required>
    <input type="submit" value="Show Day">
</form>

12. Write a program to check student grade based on marks:
Conditions:
If marks are 75% or more, the grade will be First Class.
If marks between 60% to 74%, grade will be second class.
If marks between 40% to 59%, grade will be third class.
If marks are less than 40%, students will be Fail.

INPUT:
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $marks = $_POST['marks'];

    if ($marks >= 75) {
        $grade = "First Class";
    } elseif ($marks >= 60 && $marks <= 74) {
        $grade = "Second Class";
    } elseif ($marks >= 40 && $marks <= 59) {
        $grade = "Third Class";
    } else {
        $grade = "Fail";
    }

    echo "<h3>Marks: $marks% - Grade: $grade</h3>";
}
?>

<form method="post">
    Enter Marks (%): 
    <input type="number" name="marks" min="0" max="100" required>
    <input type="submit" value="Check Grade">
</form>

13. Consider the following snippet, comment your views.
$sub = substr(12345, 2, 2);
echo “sub is $sub”;
INPUT CODE:
<?php
$sub = substr(12345, 2, 2);
echo "sub is $sub"; // Output: sub is 34
?>
OUTPUT:
sub is 34

14.Show a form with input fields for a user's name, email, and message. When the form is
submitted, display a confirmation message on the same page with the user's name and
email.

INPUT:
<?php
// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = trim($_POST['name']);
    $email = trim($_POST['email']);
    $message = trim($_POST['message']);

    if (!empty($name) && !empty($email) && !empty($message)) {
        echo "<h3>Form Submitted Successfully!</h3>";
        echo "Thank you, <b>$name</b>. We have received your message.<br>";
        echo "A confirmation has been sent to: <b>$email</b><br><br>";
        echo "<a href=''>Go Back</a>";
    } else {
        echo "<p style='color:red;'>Please fill in all fields.</p>";
        showForm();
    }
} else {
    showForm();
}

function showForm() {
    echo '
    <form method="post">
        <h3>Contact Form</h3>
        Name: <input type="text" name="name"><br><br>
        Email: <input type="email" name="email"><br><br>
        Message: <textarea name="message"></textarea><br><br>
        <input type="submit" value="Submit">
    </form>
    ';
}
?>


15. Create a PHP program to compute the sum of the digits of a number.
INPUT:
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $number = $_POST['number'];
    $sum = 0;

    // Calculate sum of digits
    $temp = $number;
    while ($temp > 0) {
        $digit = $temp % 10; 
        $sum += $digit;
        $temp = (int)($temp / 10);
    }

    echo "The sum of digits of $number is: $sum";
}
?>

<form method="post">
    Enter a number: <input type="number" name="number" required>
    <input type="submit" value="Calculate Sum">
</form>

16.Write a PHP function that takes two numbers as input and returns the sum of those
numbers. Display the result on the webpage, when a button is clicked.
INPUT:
<?php
function addNumbers($num1, $num2) {
    return $num1 + $num2;
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $number1 = $_POST['number1'];
    $number2 = $_POST['number2'];
    $sum = addNumbers($number1, $number2);
    echo "<h3>The sum of $number1 and $number2 is: $sum</h3>";
}
?>

<form method="post">
    Enter first number: <input type="number" name="number1" required><br><br>
    Enter second number: <input type="number" name="number2" required><br><br>
    <input type="submit" value="Calculate Sum">
</form>

17.Examine the various control structures in php and construct a bank transaction problem
with customers deposit and withdrawal of amount.
INPUT:
<?php
$balance = 1000; // Initial account balance

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $action = $_POST['action'];
    $amount = $_POST['amount'];

    if ($amount <= 0) {
        echo "<p style='color:red;'>Amount must be greater than 0.</p>";
    } else {
        switch ($action) {
            case "deposit":
                $balance += $amount;
                echo "<p style='color:green;'>Deposited Rs. $amount successfully.</p>";
                echo "<p>Current Balance: Rs. $balance</p>";
                break;

            case "withdraw":
                if ($amount > $balance) {
                    echo "<p style='color:red;'>Insufficient balance! Withdrawal failed.</p>";
                } else {
                    $balance -= $amount;
                    echo "<p style='color:blue;'>Withdrawn Rs. $amount successfully.</p>";
                    echo "<p>Current Balance: Rs. $balance</p>";
                }
                break;

            default:
                echo "<p style='color:red;'>Invalid transaction type.</p>";
        }
    }
}
?>

<h2>Bank Transaction</h2>
<form method="post">
    Enter Amount: <input type="number" name="amount" required><br><br>
    Choose Transaction:
    <select name="action">
        <option value="deposit">Deposit</option>
        <option value="withdraw">Withdraw</option>
    </select><br><br>
    <input type="submit" value="Submit">
</form>


18.IsSet() function in PHP with example.
The isset() function checks if a variable is set and not null.
INPUT:
<?php
$name = "Navithasri";

if (isset($name)) {
    echo "The variable 'name' is set.";
} else {
    echo "The variable 'name' is not set.";
}
?>
Output:
The variable 'name' is set.

19.Examine a PHP function that accepts an array of numbers and returns the highest and
lowest values in that array. Display the results on the webpage.
INPUT:
<?php
function findHighLow($numbers) {
    $highest = max($numbers);
    $lowest = min($numbers);
    return array("highest" => $highest, "lowest" => $lowest);
}

$numbers = array(25, 78, 12, 98, 44, 63);
$result = findHighLow($numbers);

echo "Highest Value: " . $result["highest"] . "<br>";
echo "Lowest Value: " . $result["lowest"];
?>
OUTPUT:
Highest Value: 98  
Lowest Value: 12

20.Implement a contact form with validation to ensure all fields are filled out before
submission.
INPUT:
<?php
$name = $email = $message = "";
$error = "";

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (empty($_POST["name"]) || empty($_POST["email"]) || empty($_POST["message"])) {
        $error = "All fields are required!";
    } else {
        $name = htmlspecialchars($_POST["name"]);
        $email = htmlspecialchars($_POST["email"]);
        $message = htmlspecialchars($_POST["message"]);
        echo "Thank you, $name. We received your message.";
    }
}
?>

<form method="post" action="">
    Name: <input type="text" name="name" value="<?= $name ?>"><br><br>
    Email: <input type="email" name="email" value="<?= $email ?>"><br><br>
    Message:<br>
    <textarea name="message"><?= $message ?></textarea><br><br>
    <input type="submit" value="Submit">
</form>

<?php
if (!empty($error)) {
    echo "<p style='color:red;'>$error</p>";
}
?>


21.Construct a PHP function that checks if a given year is a leap year and returns true or
false accordingly.
INPUT:
<?php
function isLeapYear($year) {
    return ($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0);
}

$year = 2024;

if (isLeapYear($year)) {
    echo "$year is a leap year.";
} else {
    echo "$year is not a leap year.";
}
?>

OUTPUT:
2024 is a leap year.


22. Create a PHP script that counts the number of occurrences of a specific word in a given
string.
INPUT:
<?php
$text = "The quick brown fox jumps over the lazy dog. The dog was not amused.";
$word = "the";

$count = substr_count(strtolower($text), strtolower($word));
echo "The word '$word' appears $count times.";
?>
OUTPUT:
The word 'the' appears 3 times.


23.Prioritize the use of GET and POST arguments in PHP with a real time example.
INPUT;
<html>
<head>
    <title>GET and POST Example</title>
</head>
<body>

<h2> Search Form (GET Method)</h2>
<form method="get" action="">
    Search: <input type="text" name="query">
    <input type="submit" name="searchBtn" value="Search">
</form>

<?php
// GET method handling
if (isset($_GET['searchBtn']) && !empty($_GET['query'])) {
    $search = htmlspecialchars($_GET['query']);
    echo "<p>You searched for: <strong>$search</strong></p>";
}
?>

<hr>

<h2> Login Form (POST Method)</h2>
<form method="post" action="">
    Username: <input type="text" name="username"><br><br>
    Password: <input type="password" name="password"><br><br>
    <input type="submit" name="loginBtn" value="Login">
</form>

<?php
// POST method handling
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['loginBtn'])) {
    $username = htmlspecialchars($_POST['username']);
    $password = htmlspecialchars($_POST['password']);

    // Example credentials
    if ($username == "admin" && $password == "1234") {
        echo "<p style='color:green;'>Welcome, <strong>$username</strong>!</p>";
    } else {
        echo "<p style='color:red;'>Invalid credentials.</p>";
    }
}
?>

</body>
</html>


24. Write a PHP script to manipulate the strings with all the string functions.
INPUT:
<?php
$str = " Hello PHP World! ";

// String manipulation
echo "Original: '$str'<br>";
echo "Trimmed: '" . trim($str) . "'<br>";
echo "Lowercase: " . strtolower($str) . "<br>";
echo "Uppercase: " . strtoupper($str) . "<br>";
echo "Length: " . strlen($str) . "<br>";
echo "Word count: " . str_word_count($str) . "<br>";
echo "Reversed: " . strrev($str) . "<br>";
echo "Position of 'PHP': " . strpos($str, "PHP") . "<br>";
echo "Replace 'World' with 'Universe': " . str_replace("World", "Universe", $str) . "<br>";
?>

25. Construct a PHP script to replace the first ‘the’ of the following string with ‘best’. Data:
“The Thing will come to you soon”
INPUT:
<?php
$sentence = "The Thing will come to you soon";
$modified = preg_replace('/the/i', 'best', $sentence, 1); // Case-insensitive replacement
echo $modified;
?>
26.Construct a PHP Program to create a chess board in PHP using the 'for' loop
INPUT:
<?php
echo "<table border='1' cellspacing='0' cellpadding='20'>";
for ($row = 1; $row <= 8; $row++) {
    echo "<tr>";
    for ($col = 1; $col <= 8; $col++) {
        $total = $row + $col;
        if ($total % 2 == 0) {
            echo "<td style='background-color: white; width: 40px; height: 40px;'></td>";
        } else {
            echo "<td style='background-color: black; width: 40px; height: 40px;'></td>";
        }
    }
    echo "</tr>";
}
echo "</table>";
?>

27. Articulate the mathematical operators with suitable examples in PHP.
INPUT:
<?php
$a = 10;
$b = 3;

echo "Addition: " . ($a + $b) . "<br>";     // 13  
echo "Subtraction: " . ($a - $b) . "<br>";  // 7  
echo "Multiplication: " . ($a * $b) . "<br>"; // 30  
echo "Division: " . ($a / $b) . "<br>";     // 3.333...  
echo "Modulus: " . ($a % $b) . "<br>";      // 1  
echo "Exponent: " . ($a ** $b) . "<br>";    // 1000  
?>
28. Consider three variables $a, $b, $c, apply var_dump() function to evaluate if the values
are equal or not.
INPUT:
<?php
$a = 10;
$b = "10";
$c = 10;

var_dump($a == $b);  // true (value equal)
var_dump($a === $b); // false (type not equal)
var_dump($a === $c); // true (value and type equal)
?>


29. Infer the usage of the following PHP functions:
(i) rand() (ii) abs() (iii) strreplace() (iv) pi( ) (v) ceil()
INPUT:
<?php
echo "Random number (1-100): " . rand(1, 100) . "<br>";  // rand()
echo "Absolute value of -50: " . abs(-50) . "<br>";      // abs()
echo "Replace 'world' with 'PHP': " . str_replace("world", "PHP", "Hello world") . "<br>"; // str_replace()
echo "Value of pi: " . pi() . "<br>";                    // pi()
echo "Ceil of 4.3: " . ceil(4.3) . "<br>";               // ceil()
?>

30. Develop a PHP script that generates a random password consisting of a combination of
letters, numbers, and special characters.
INPUT:
<?php
function generatePassword($length = 12) {
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
    $password = '';
    for ($i = 0; $i < $length; $i++) {
        $password .= $chars[rand(0, strlen($chars) - 1)];
    }
    return $password;
}

echo "Random Password: " . generatePassword(12);
?>

31. Remove the first element from an array in PHP using array functions.
Input:
<?php
$fruits = ["apple", "banana", "orange", "grape"];
array_shift($fruits);
print_r($fruits);
?>
Output:

Array
(
    [0] => banana
    [1] => orange
    [2] => grape
)

32. Infer the result of the following PHP code?
a.<?php
$mail = "admin@example.com";
$mail = str_replace("a","@",$mail);
echo "Contact me at $mail.";
?>

Output:

Contact me at @dmin@ex@mple.com

b. Determine the result of the following PHP code?
<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>

Output:
Array
(
    [2] => emily
)

33. Construct a PHP code to create a multidimensional array representing a matrix and display the value in
the second row and third column.
Input:
<?php
$matrix = array(
    array(1, 2, 3),
    array(4, 5, 6),
    array(7, 8, 9)
);
echo "Value at second row, third column: " . $matrix[1][2];
?>

Output:
Value at second row, third column: 6

34. Replace all occurrences of a specific word with another word in a string using regular expressions in
PHP.
<?php
$text  = "PHP is great. I really enjoy learning PHP!";
$pattern = "/PHP/";          
$replacement = "Python";     
$newText = preg_replace($pattern, $replacement, $text);
echo $newText;
?>

Output:
Python is great. I really enjoy learning Python!

35. Write a PHP script using an array that checks if a string contains another string and displays the result.
Input:
<?php
$strings = array("apple pie", "banana bread", "orange juice");
$search  = "bread"; 
$found = false;
foreach ($strings as $str) {
    if (strpos($str, $search) !== false) {
        $found = true;
        break;
    }
}
if ($found) {
    echo "The string '$search' was found in the array.";
} else {
    echo "The string '$search' was not found in the array.";
}
?>
Output:
The string 'bread' was found in the array.

36. Create an array of fruits in PHP and display the third element.

Input:
<?php
$fruits = array("Apple", "Banana", "Orange", "Mango");

echo "The third fruit is: " . $fruits[2];
?>

Output:
The third fruit is: Orange

37. Explain Push and Pop in array functions.
Input:
<?php
$numbers = [10, 20, 30];
echo "Original array:\n";
print_r($numbers);
array_push($numbers, 40);
echo "After array_push(40):\n";
print_r($numbers);
$removed = array_pop($numbers);
echo "Value removed by array_pop(): $removed\n";
echo "Array after array_pop():\n";
print_r($numbers);
?>

Output:

Original array:
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
)
After array_push(40):
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
    [3] => 40
)
Value removed by array_pop(): 40
Array after array_pop():
Array
(
    [0] => 10
    [1] => 20
    [2] => 30
)

38. Interpret the steps to iterate over a PHP array using a while loop with an example
<?php
$fruits = array("Apple", "Banana", "Mango", "Orange");

$i = 0;                   
$total = count($fruits);    

while ($i < $total) {       
    echo $fruits[$i] . "\n"; 
    $i++;                 
}
?>

Output:

Apple
Banana
Mango
Orange

39. A school wants to automate the calculation of student grades. Design a system that allows teachers to input
student scores, calculates their grades, and generates a summary report. How would you utilize arrays and
array functions to store and process the student data effectively?

Input:
<?php
$students = [
    [
        "name"   => "John",
        "scores" => [85, 90, 78]
    ],
    [
        "name"   => "Emma",
        "scores" => [92, 88, 95]
    ],
    [
        "name"   => "Michael",
        "scores" => [70, 65, 80]
    ]
];

foreach ($students as $index => $student) {
    $total   = array_sum($student['scores']);
    $average = $total / count($student['scores']);

    if ($average >= 90) {
        $grade = "A";
    } elseif ($average >= 80) {
        $grade = "B";
    } elseif ($average >= 70) {
        $grade = "C";
    } elseif ($average >= 60) {
        $grade = "D";
    } else {
        $grade = "F";
    }

    $students[$index]['average'] = $average;
    $students[$index]['grade']   = $grade;
}
echo "Student Grade Summary:\n\n";
foreach ($students as $student) {
    echo "Name   : " . $student['name'] . "\n";
    echo "Average: " . $student['average'] . "\n";
    echo "Grade  : " . $student['grade'] . "\n";
    echo "-------------------------\n";
}
?>

Output:

Student Grade Summary:

Name   : John
Average: 84.333333333333
Grade  : B
-------------------------
Name   : Emma
Average: 91.666666666667
Grade  : A
-------------------------
Name   : Michael
Average: 71.666666666667
Grade  : C
-------------------------

40. Write a PHP script to remove all characters from a string except a-z A-Z 0-9 or " " using an array.
Input:
<?php
$input = "Hello@! 123 #$*World";
$chars = str_split($input);
$clean = array();
foreach ($chars as $ch) {
    if (preg_match('/^[a-zA-Z0-9 ]$/', $ch)) {
        $clean[] = $ch;  
    }
}
$result = implode('', $clean);
echo "Original  : $input\n";
echo "Cleaned   : $result\n";
?>

Output:

Original  : Hello@! 123 #$*World
Cleaned   : Hello 123 World

41. How can you use regular expressions to extract all email addresses from a given string using an array in
PHP?
Input:
<?php
$text = "Contact us at info@example.com or support@test.org.
You can also reach admin@mysite.net for more details.";
$pattern = '/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/';
preg_match_all($pattern, $text, $matches);
$emails = $matches[0];
print_r($emails);
?>
Output:

Array
(
    [0] => info@example.com
    [1] => support@test.org
    [2] => admin@mysite.net
)

42. Write a PHP script to find the maximum and minimum marks from the following set of arrays

$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
Input:
<?php
$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
$allMarks = array_merge($marks1, $marks2, $marks3);
$max = max($allMarks);
$min = min($allMarks);
echo "Maximum mark: " . $max . "\n";
echo "Minimum mark: " . $min . "\n";
?>
Output:

Maximum mark: 635
Minimum mark: 111

43. Develop a regular expression pattern that validates a password based on the following criteria: at least 8
characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special
character.

Input:
<?php
$password = "Test@123";
$pattern = '/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}$/';
if (preg_match($pattern, $password)) {
    echo "Valid password";
} else {
    echo "Invalid password";
}
?>
Output:

Valid password

44. Develop a music playlist management system for a streaming service. The system should allow users to
create, modify, and organize playlists. How would you use arrays and array functions to store and
manipulate the song data and playlist information efficiently?
Input:
<?php
$songs = [
    ["id"=>1,"title"=>"Shape of You","artist"=>"Ed Sheeran","length"=>"04:23"],
    ["id"=>2,"title"=>"Blinding Lights","artist"=>"The Weeknd","length"=>"03:35"],
    ["id"=>3,"title"=>"Counting Stars","artist"=>"OneRepublic","length"=>"04:19"],
];
$playlists = [
    "Workout" => [1, 3],
    "Chill"   => [2]
];
$playlists["RoadTrip"] = [];
array_push($playlists["RoadTrip"], 2);
$key = array_search(3, $playlists["Workout"]);
if ($key !== false) {
    unset($playlists["Workout"][$key]);
}
$playlists["Combined"] = array_merge($playlists["Chill"], $playlists["RoadTrip"]);
echo "Combined Playlist:\n";
foreach ($playlists["Combined"] as $songId) {
    foreach ($songs as $song) {
        if ($song['id'] == $songId) {
            echo "- {$song['title']} ({$song['artist']})\n";
        }
    }
}
?>

Output:

Combined Playlist:
- Blinding Lights (The Weeknd)
- Blinding Lights (The Weeknd)

45. Write a PHP function to compare two multidimensional arrays and return the difference.
Input:
<?php
function arrayRecursiveDiff(array $array1, array $array2) {
    $difference = [];
    foreach ($array1 as $key => $value) {
        if (!array_key_exists($key, $array2)) {
            $difference[$key] = $value;
        } else {
            if (is_array($value) && is_array($array2[$key])) {
                $newDiff = arrayRecursiveDiff($value, $array2[$key]);
                if (!empty($newDiff)) {
                    $difference[$key] = $newDiff;
                }
            }
            elseif ($value !== $array2[$key]) {
                $difference[$key] = $value;
            }
        }
    }

    return $difference;
}

$array1 = [
    "user" => [
        "name" => "John",
        "age"  => 25
    ],
    "city" => "New York",
    "country" => "USA"
];

$array2 = [
    "user" => [
        "name" => "John",
        "age"  => 30
    ],
    "city" => "New York"
];

$result = arrayRecursiveDiff($array1, $array2);

print_r($result);
?>

 
Output:

Array
(
    [user] => Array
        (
            [age] => 25
        )

    [country] => USA
)

46. Write a PHP program to find the index of a specific value in an array.
Input:
<?php
$numbers = array(10, 20, 30, 40, 50);
$searchValue = 30;
$index = array_search($searchValue, $numbers);
if ($index !== false) {
    echo "The value $searchValue is found at index $index.";
} else {
    echo "The value $searchValue was not found in the array.";
}
?>

Output:
The value 30 is found at index 2.

47. Delete an element from the below array. And print the array elements in PHP. $x = array (1, 2, 3, 4, 5);
Input:
<?php
$x = array(1, 2, 3, 4, 5);
unset($x[2]);
foreach ($x as $value) {
    echo $value . " ";
}
?>
Output:

1 2 4 5 

48. Record number handling in PHP with suitable examples.
Input:
<?php
$students = array("John", "Emma", "Michael", "Sarah");

$recordNo = 1;  

foreach ($students as $student) {
    echo "Record #".$recordNo.": ".$student."<br>";
    $recordNo++;
}
?>

Output:

Record #1: John
Record #2: Emma
Record #3: Michael
Record #4: Sarah

49. A sports team wants to evaluate player performance based on various statistical metrics. Design a system
that utilizes numerical types and mathematical operators to calculate performance indices, averages, and
Input:
<?php
$players = [
    ["name"=>"Player A","goals"=>15,"assists"=>7,"matches"=>12,"tackles"=>20],
    ["name"=>"Player B","goals"=>9, "assists"=>12,"matches"=>14,"tackles"=>16]
];

foreach ($players as $p) {
    $totalPoints = $p['goals'] + $p['assists'];
    $avgGoals = $p['goals'] / $p['matches'];
    $perfIndex = (($p['goals'] * 2) + $p['assists'] + $p['tackles']) / $p['matches'];
    echo "Player: {$p['name']}\n";
    echo "Total Points      : $totalPoints\n";
    echo "Avg Goals/Match   : " . round($avgGoals,2) . "\n";
    echo "Performance Index : " . round($perfIndex,2) . "\n";
    echo "-------------------------------\n";
}
?>
Output:

Player: Player A
Total Points      : 22
Avg Goals/Match   : 1.25
Performance Index : 4.75
-------------------------------
Player: Player B
Total Points      : 21
Avg Goals/Match   : 0.64
Performance Index : 3.29

50. Construct a PHP script to lower-case and upper-case, all elements in an array.
Input:
<?php
$fruits = array("Apple", "Banana", "MANGO", "ORANGE");
$lowerCaseArray = array_map('strtolower', $fruits);
$upperCaseArray = array_map('strtoupper', $fruits);
echo "Original Array:\n";
print_r($fruits);
echo "\nArray in Lowercase:\n";
print_r($lowerCaseArray);
echo "\nArray in Uppercase:\n";
print_r($upperCaseArray);
?>

Output:

Original Array:
Array
(
    [0] => Apple
    [1] => Banana
    [2] => MANGO
    [3] => ORANGE
)

Array in Lowercase:
Array
(
    [0] => apple
    [1] => banana
    [2] => mango
    [3] => orange
)

Array in Uppercase:
Array
(
    [0] => APPLE
    [1] => BANANA
    [2] => MANGO
    [3] => ORANGE
)
